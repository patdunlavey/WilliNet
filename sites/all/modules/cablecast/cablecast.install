<?php
// $Id: cablecast.install,v 1.1 2010/07/20 22:18:47 raytiley Exp $

/**
  * Implementation of hook_requirements().
  */
function cablecast_requirements($phase) {
  $requirements = array();
  $t = get_t();
  
  if ($phase == 'runtime') {
    if($cablecast_server_uri = variable_get('cablecast_server_uri', 0)) {
      
      //Create a client and get WS Version
      $cablecast_server_uri = $cablecast_server_uri."/CablecastWS/CablecastWS.asmx?WSDL";
      $client = new SoapClient($cablecast_server_uri, array('cache_wsdl' => 0));
      $ws_version = cablecast_get_ws_version($client);
      $ws_version_stripped = (int)str_replace('.', '', $ws_version);
      
      if($ws_version_stripped >= 300)  {
        //Version is OK
        $requirements['cablecast'] = array(
          'title' => $t('Cablecast WebService Version'), 
          'value' => $ws_version,
          'severity' => REQUIREMENT_OK,
        );
     }
     else
     {
       //Version is to low
       $requirements['cablecast'] = array(
         'title' => $t('Cablecast'),
         'value' => $ws_version,
         'description' => t("The Required version for the Cablecast Drupal Module is 3.0.0"),
         'severity'  => REQUIREMENT_ERROR,
       );
     }
    }
    else
    {
      //There was some weird error getting server uri
      $requirements['cablecast'] = array(
        'title' => $t('Cablecast'),
        'value' => t("Cablecast Server Address"),
        'description' => t("The Server address for this server seems to be configured incorrectly."),
        'severity'  => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
  * Implementation of hook_install().
  */
function cablecast_install() {
    module_load_include('module', 'taxonomy', 'taxonomy');
    drupal_install_schema('cablecast_show');
    drupal_install_schema('cablecast_schedule_event');
    drupal_install_schema('cablecast_project');
    drupal_install_schema('cablecast_custom_field');
    
    // set up locations taxonomy
    $location_vocab = array(
        'name' => 'Cablecast Locations',
        'description' => t('Represents what location a Schedule Event, Show, or Project belong to.'),
        'help' => 0,
        'relations' => 0,
        'hierarchy' =>0,
        'multiple' => 0,
        'required' => 0,
        'tags'  => 0,
        'module' => 'cablecast',
        'weight' => 0,
        'nodes' => array('cablecast_show' => 1, 'cablecast_schedule_event' => 1, 'cablecast_project' => 1),
        );
        
        taxonomy_save_vocabulary($location_vocab);
    
    // set up channels taxonomy
    $channels_vocab = array(
        'name' => 'Cablecast Channels',
        'description' => t('Channels available on the Cablecast Server.  Used for Schedule'),
        'help' => 0,
        'relations' => 0,
        'hierarchy' =>0,
        'multiple' => 0,
        'required' => 1,
        'tags'  => 0,
        'module' => 'cablecast',
        'weight' => 0,
        'nodes' => array('cablecast_schedule_event' => 1),
        );
        
        taxonomy_save_vocabulary($channels_vocab);
        
    // set up categories taxonomy
    $categories_vocab = array(
        'name' => 'Cablecast Categories',
        'description' => t('Categories used to classify shows on the Cablecast Server.'),
        'help' => 0,
        'relations' => 0,
        'hierarchy' =>0,
        'multiple' => 0,
        'required' => 0,
        'tags'  => 0,
        'module' => 'cablecast',
        'weight' => 0,
        'nodes' => array('cablecast_show' => 1),
        );
        
        taxonomy_save_vocabulary($categories_vocab);
}

/**
  * Implementation of hook_uninstall().
  */
function cablecast_uninstall() {
  
    //Delete all Nodes that are Cablecast Content Types
    $cablecast_nodes = db_query("SELECT nid FROM {node} WHERE type='cablecast_show' OR type='cablecast_schedule_event' OR type='cablecast_project'");
    while($r = db_fetch_array($cablecast_nodes))  {
        node_delete($r['nid']);
    }
    
    ////Delete Vocabs
    $vocabs = taxonomy_get_vocabularies();
    foreach($vocabs as $v) {
      if($v->name == "Cablecast Channels" || $v->name == "Cablecast Categories" || $v->name == "Cablecast Locations") {
        taxonomy_del_vocabulary($v->vid);
      }
    }
    
    //Uninstall Schemas
    drupal_uninstall_schema('cablecast_show');
    drupal_uninstall_schema('cablecast_schedule_event');
    drupal_uninstall_schema('cablecast_project');
    drupal_uninstall_schema('cablecast_custom_field');
    
    //Delete Variables
    variable_del('cablecast_server_uri');
    variable_del('cablecast_default_location_id');
    variable_del('cablecast_default_channel');
    variable_del('cablecast_default_project_name');
    variable_del('cablecast_last_sync');
    
}

/**
  * Implementation of hook_schema().
  */
function cablecast_show_schema() {
    $schema['cablecast_show'] = array(
        'description'  =>  t("Stores all the meta data about a Cablecast show."),
        'fields'  => array(
            'nid'  => array(
                'type'  => 'int',
                'unsigned'  => TRUE,
                'not null'  => TRUE,
                'default'  => 0,
                'description'  => t("The shows {node}.nid."),
                ),
            'vid'  => array(
                'type'  =>  'int',
                'unsigned'  => TRUE,
                'not null'  => TRUE,
                'default'  => 0,
                'description'  => t("The shows {node_revisions}.vid."),
                ),
            'showID'  => array(
                'type' => 'int',
                'unsigned'  =>  TRUE,
                'default'  => 0,
                'not null'  =>  TRUE,
                'description'  => t('Cablecast ShowID.'),
                ),
            'cablecast_location_id'  => array(
                'type' => 'int',
                'unsigned'  =>  TRUE,
                'default'  => 0,
                'not null'  =>  TRUE,
                'description'  => t('Cablecast LocationID.'),
                ),
            'internalTitle'  => array(
                'type' => 'text',
                'not null' =>  FALSE,
                'description' => t("In Cablecast this field is called the title."),
                ),
            'trt'  =>  array(
                'type'  =>  'int',
                'not null'  => FALSE,
                'description'  =>  t("Total Run Time in seconds."),
                ),
            'event_date'  =>  array(
                'type'  =>  'int',
                'description'  =>  t("Show records Event Date."),
                ),
            'category_id' =>  array(
                'type'  =>  'int',
                'unsigned'  =>  TRUE,
                'description'  =>  t("Cablecast Show's Category ID used to link taxonomy"),
                ),
            'project_id'  =>  array(
                'type'  =>  'int',
                'unsigned'  =>  TRUE,
                'description'  =>  t("Cablecast Show's Project ID"),
                ),
            'producer_id'  =>  array(
                'type'  =>  'int',
                'unsigned'  =>  'true',
                'description'  =>  t("Cablecast Show's Producer ID used to link to drupal user"),
                ),
            'producer_name'  =>  array(
                'type'  =>  'text',
                'not null' =>  FALSE,
                'description'  =>  t("Cablecast Show Producer's Name"),
                ),
            'rating'  =>  array(
                'type'  =>  'text',
                'not null' => FALSE,
                'description'  =>  t("A Cablecast Show's Rating"),
                ),
            'dsk_bug_text'  =>  array(
                'type'  =>  'text',
                'description'  =>  t("Cablecast Show's bug text."),
                ),
            'streaming_file_url'  =>  array(
                'type'  =>  'text',
                'description'  =>  t("Cablecast Show's Streaming File URL."),
                ),
            'dsk_crawl_text'  =>  array(
                'type'  =>  'text',
                'description'  => t("Cablecast Show's Crawl Text."),
                ),
            'dsk_crawl_length'  =>  array(
                'type'  =>  'int',
                'description'  =>  t("Cablecast Show's dsk  crawl length in seconds"),
                ),
            ),
        'primary key'  => array('nid', 'vid'),
        'unique keys'  => array(
            'vid'  =>  array('vid')
            ),
            'indexes'  =>  array(
                'nid' => array('nid')
            ),
        );
        
        return $schema;
}
/**
  * Implementation of hook_schema()
  */
function cablecast_schedule_event_schema(){
    $schema['cablecast_schedule_event'] = array(
        'description'  =>  t("Stores all the details of a Cablecast Schedule Event."),
        'fields'  =>  array(
            'nid'  =>  array(
                'type'  =>  'int',
                'unsigned'  =>  TRUE,
                'not null'  =>  TRUE,
                'default'  =>  0,
                'description'  =>  t("The schedule events {node}.nid."),
                ),
            'vid'  =>  array(
                'type'  =>  'int',
                'unsigned'  =>  TRUE,
                'not null'  =>  TRUE,
                'default'  =>  0,
                'description'  =>  t("The shows {node_revisions}.vid."),
                ),
            'cablecast_show_nid'  => array(
                'type'  =>  'int',
                'unsigned'  => TRUE,
                'not null'  => TRUE,
                'default'  => 0,
                'description'  => t("The cablecast shows {node}.nid."),
                ),
            'scheduleID'  => array(
                'type' => 'int',
                'unsigned'  =>  TRUE,
                'default'  => 0,
                'not null'  =>  TRUE,
                'description'  => t('Cablecast ScheduleID.'),
                ),
            'showID'  => array(
                'type' => 'int',
                'unsigned'  =>  TRUE,
                'default'  => 0,
                'not null'  =>  TRUE,
                'description'  => t('Cablecast ShowID'),
                ),
            'start_time'  => array(
                'type' => 'int',
                'unsigned' => FALSE,
                'default' =>  0,
                'not null'  =>  TRUE,
                'description'  => t('Schedule Event Start Time.'),
                ),
            'end_time'  => array(
                'type' => 'int',
                'unsigned' => FALSE,
                'default' =>  0,
                'not null'  =>  TRUE,
                'description'  => t('Schedule Event End Time'),
                ),
            'run_bump'  => array(
                'type' => 'int',
                'unsigned'  =>  TRUE,
                'default'  => 0,
                'not null'  =>  TRUE,
                'description'  => t('Schedule Event Run Bump.'),
                ),
            'cg_exempt'  => array(
                'type' => 'int',
                'unsigned'  =>  TRUE,
                'default'  => 0,
                'not null'  =>  TRUE,
                'description'  => t('Schedule Event CG Status.'),
                ),
            ),
            'primary key'  => array('nid', 'vid'),
            'unique keys'  => array(
                'vid'  =>  array('vid')
                ),
                'indexes'  =>  array(
                    'nid' => array('nid')
                ),
            );
            
            return $schema;
}
/**
  * Implementation of hook_schema()
  */
function cablecast_project_schema()  {
	$schema['cablecast_project'] = array(
		'description'  =>  t("A cablecast project contains many cablecast shows.  Usually used as a series."),
		'fields'  =>  array(
			'nid'  =>  array(
				'type'  =>  'int',
				'unsigned'  =>  TRUE,
				'not null'  =>  TRUE,
				'default'  =>  0,
				'description'  =>  t("The projects {node}.nid."),
				),
			'vid'  =>  array(
				'type'  =>  'int',
				'unsigned'  =>  TRUE,
				'not null'  =>  TRUE,
				'default'  =>  0,
				'description'  =>  t("The projects {node_revisions}.vid."),
				),
			'cablecast_project_id'  => array(
				'type'  =>  'int',
				'unsigned'  => TRUE,
				'not null'  => TRUE,
				'default'  => 0,
				'description'  => t("The cablecast shows {node}.nid."),
				),
  		'cablecast_location_id'  => array(
          'type' => 'int',
          'unsigned'  =>  TRUE,
          'default'  => 0,
          'not null'  =>  TRUE,
          'description'  => t('Cablecast LocationID.'),
          ),
			'cablecast_project_has_podcast'  => array(
				'type' => 'int',
				'unsigned'  =>  TRUE,
				'default'  => 0,
				'not null'  =>  TRUE,
				'description'  => t('Cablecast ScheduleID.'),
				),
			'cablecast_project_podcast_name'  => array(
				'type' => 'text',
				'description'  => t('Projects podcast name.'),
				),
			'cablecast_project_podcast_description'  =>  array(
				'type'  =>  'text',
				'description'  =>  t('Projects podcast description.'),
				),
			'cablecast_project_podcast_url'  =>  array(
				'type'  =>  'text',
				'description'  =>  t('Projects pocast url.'),
				),
			),
			'primary key'  => array('nid', 'vid'),
			'unique keys'  => array(
				'vid'  =>  array('vid')
				),
				'indexes'  =>  array(
					'nid' => array('nid')
				),
			);
			
			return $schema;
}
/**
  * Implementation of hook_schema()
  */
function cablecast_custom_field_schema() {
    $schema['cablecast_custom_field'] = array(
        'description'  =>  t("Custom Fields for a Cablecast show"),
        'fields'  =>  array(
            'nid'  =>  array(
                'type'  =>  'int',
                'unsigned'  =>  TRUE,
                'not null'  =>  TRUE,
                'default'  =>  0,
                'description'  =>  t("Cablecast Show {node}.nid."),
                ),
            'field_name'  =>  array(
                'type'  =>  'text',
                'not null'  =>  false,
                'description'  =>  t("Cablecast Show Custom Field Name."),
                ),
            'value'  =>  array(
                'type'  =>  'text',
                'not null'  =>  false,
                'description'  =>  t("Cablecast Show Custom Field Value."),
                ),
        ),
        'primary key'  =>  array('nid'),
    );
    
    return $schema;
}