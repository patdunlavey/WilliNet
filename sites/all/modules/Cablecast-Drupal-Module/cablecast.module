<?php
// $Id: cablecast.module,v 1.1 2010/07/20 22:18:47 raytiley Exp $
/**
 *@file
 *Creates a cablecast_show and cablecast_project content types as well as some cablecast taxonomy vocabs.
 *
 */

/**
 * Implementation of hook_node_info().
 */
function cablecast_node_info() {
    return array(
        'cablecast_show'  => array(
            'name'  => t('Cablecast Show'),
            'module'  =>  'cablecast',
            'description'  =>  t('Represents a Cablecast Show'),
            'has_title'  =>  TRUE,
            'title_label'  =>  t('Title'),
            'has_body'  =>  TRUE,
            'body_label'  => t('Comments'),
    ),
        'cablecast_schedule_event' => array(
            'name' => t('Cablecast Schedule Event'),
            'module' => 'cablecast',
            'description' => t("Represents a Cablecast Schedule Event"),
            'has_title' => TRUE,
            'title_label' => t('Title'),
            'has_body' => FALSE,
    ),
        'cablecast_project'  =>  array(
            'name'  => t('Cablecast Project'),
            'module'  =>  'cablecast',
            'description'  => t("Represents a Cablecast Project"),
            'has_title'  =>  TRUE,
            'title_label'  =>  t('Title'),
            'has_body'  =>  TRUE,
            'body_label'  =>  t('Description'),
    ),
    );
}

/*
 * Implementation of hook_menu().
 */
function cablecast_menu() {
    $items['admin/settings/cablecast'] = array(
        'title' => 'Cablecast Settings',
        'description' => 'Setup Cablecast Server and Default Location.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cablecast_admin_settings'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'cablecast.admin.inc',
    );

    $items['cablecast/schedule'] = array(
		'title'  =>  'TV Schedule',
		'description'  =>  'Displays a TV Schedule for given cablecast_channel taxonomy term',
		'page callback'  =>  'cablecast_schedule_page',
		'access arguments'  =>  array('access content'),
		'type'  =>  MENU_NORMAL_ITEM,
    );
    return $items;
}


function cablecast_form(&$node, $form_state) {
    // The site admin can decide if this node type has a title and body, and how
    // the fields should be labeled. We need to load these settings so we can
    // build the node form correctly.
    $type = node_get_types('type', $node);

    if ($type->has_title) {
        $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5
        );
    }

    if ($type->has_body) {
        // In Drupal 6, we use node_body_field() to get the body and filter
        // elements. This replaces the old textarea + filter_form() method of
        // setting this up. It will also ensure the teaser splitter gets set up
        // properly.
        $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
    }
    // Here we can make specific fields editable for each content type (see example below)
    switch ($type->type ) {
        case 'cablecast_show':
            break;
        case 'cablecast_schedule_event':
            break;
        case 'cablecast_project':
            break;
    }
    // Now we define the form elements specific to our node type.
    //  $form['color'] = array(
    //    '#type' => 'textfield',
    //    '#title' => t('Color'),
    //    '#default_value' => isset($node->color) ? $node->color : '',
    //  );
    //  $form['quantity'] = array(
    //    '#type' => 'textfield',
    //    '#title' => t('Quantity'),
    //    '#default_value' => isset($node->quantity) ? $node->quantity : 0,
    //    '#size' => 10,
    //    '#maxlength' => 10
    //  );

    return $form;
}


function cablecast_schedule_page() {
    if(arg(2))  {
        $channel_tax = _cablecast_get_taxonomy_term_by_name(str_replace('_', ' ',arg(2)), 'Cablecast Channels');
        //Get Date directly from query string - Default to today
        if(isset($_GET['date']))  {
            $date = strtotime($_GET['date']);
        }
        else {
            $date = time();
        }
        //Table Stuff
        $schedule_table_header = array(t("Watch Online"), t("Program Name"), t("Time"));
        $schedule_table_data = array();
        $schedule_nids = db_query("SELECT ce.nid as nid FROM {cablecast_schedule_event} ce inner join {term_node} tn on (tn.nid = ce.nid) WHERE tn.tid = ".$channel_tax[0]->tid." and start_time >= ".strtotime(date("Y-m-d\T00:00:00",$date))." AND end_time <= ".strtotime(date("Y-m-d\T23:59:59",$date))." ORDER BY start_time");
        while($r = db_fetch_array($schedule_nids))  {
            $node = node_load($r['nid']);
            $node->show_node = node_load($node->cablecast_show_nid);
            $node->video_nodes = array();
            $result = db_query("SELECT nid FROM {content_type_video} WHERE field_show_id_value = '%d' order by field_show_id_value asc",$node->showID);
            $vod_links = '';
            while ($row = db_fetch_object($result)) {
                $vn = node_load($row->nid);
                $vimg = theme('imagecache', 'video_tiny_thumbnail', $vn->field_image[0]['filepath']);
                $node->video_nodes[] = $vn;
                $vod_links .= '<a href="/node/'.$node->show_node->nid.'" title="click to watch video on demand">'.$vimg.'</a>';
            }
            $schedule_table_data[] = array(
            array('data'=>$vod_links, 'class'=>'vod_links'),
            array('data'=>'<a href="/node/'.$node->show_node->nid.'">'.t($node->title).'</a>', 'class'=>'event_link'),
            array('data'=>date('g:i a',$node->start_time), 'class'=>'event_time')
            );
        }
        $day = 24*60*60;
        $aa = '<div id="cablecast_schedule_channel_title">'.str_replace('_', ' ',arg(2)).'</div>';
        $aa .= '<a href="/cablecast/schedule/'.arg(2).'?date='.date("m/d/Y",$date-$day).'"><div id="cablecast_schedule_prev_date">'.date("l, F jS",$date-$day).'</div></a>';
        $aa .= '<div id="cablecast_schedule_date">'.date("l, F jS",$date).'</div>';
        $aa .= '<a href="/cablecast/schedule/'.arg(2).'?date='.date("m/d/Y",$date+$day).'"><div id="cablecast_schedule_prev_date">'.date("l, F jS",$date+$day).'</div></a>';
        return $aa . theme_table($schedule_table_header, $schedule_table_data, array('id'=>'cablecast_schedule_'.$channel_tax[0]->tid, 'class' => 'cablecast_schedule'));
    }
    else {
        //ToDo - Return a list of links to Available channels
        return "You didn't specify a channel";
    }
}

/**
 * Implementation of hook_cron().
 */
function cablecast_cron() {
    if($cablecast_server_uri = variable_get('cablecast_server_uri', 0)) {
        $cablecast_server_uri = $cablecast_server_uri."/CablecastWS/CablecastWS.asmx?WSDL";
        $client = new SoapClient($cablecast_server_uri);

        //Set user to admin so that schedule_events can be deleted
        global $user;
        $original_user = $user;
        session_save_session(FALSE);
        $user = user_load(array('uid' => 1));


        //Check Cablecast Webservice Version, Should also catch bad connections.
        if(cablecast_check_version($client))  {
            watchdog("Cablecast", "Start Syncing Channels");
            cablecast_sync_channels($client);
            watchdog("Cablecast", "Start Syncing Categories");
            cablecast_sync_categories($client);
            watchdog("Cablecast", "Start Syncing Projects");
            cablecast_sync_projects($client);
            watchdog("Cablecast", "Start Syncing Shows");
            cablecast_sync_shows($client);
            watchdog("Cablecast", "Start Syncing Schedule");
            cablecast_sync_schedule($client);
            watchdog("Cablecast", "End Cron");
        }
        else  {
            watchdog("Cablecast", "Cablecast detected an Cablecast WebService version incompatiable with this module.");
        }

        $user = $original_user;
        session_save_session(TRUE);
    }
}

/**
 * Implementation of hook_insert_node().
 */
function cablecast_insert($node) {
    switch($node->type) {
        case 'cablecast_show':
            db_query("INSERT INTO {cablecast_show} (nid, vid, showID, internalTitle, trt, event_date, category_id, project_id, producer_id, producer_name, rating, dsk_bug_text, dsk_crawl_text, dsk_crawl_length) VALUES
            (%d, %d, %d, '%s', %d, '%s', %d, %d, %d, '%s', '%s', '%s', '%s', %d)",
            $node->nid, $node->vid, $node->showID, $node->internalTitle, $node->trt, $node->event_date, $node->category_id, $node->project_id, $node->producer_id, $node->producer_name, $node->rating, $node->dsk_bug_text, $node->dsk_crawl_text, $node->dsk_crawl_length);
            break;
        case 'cablecast_schedule_event':
            db_query("INSERT INTO {cablecast_schedule_event} (nid, vid, scheduleID, showID, cablecast_show_nid, start_time, end_time, run_bump, cg_exempt) VALUES
            (%d, %d, %d, %d, %d, %d, %d, %d, %d)",
            $node->nid, $node->vid, $node->scheduleID, $node->showID, $node->cablecast_show_nid, $node->start_time, $node->end_time, $node->run_bump, $node->cg_exempt);
            break;
        case 'cablecast_project':
            db_query("INSERT INTO {cablecast_project} (nid, vid, cablecast_project_id, cablecast_project_has_podcast, cablecast_project_podcast_name, cablecast_project_podcast_description, cablecast_project_podcast_url) VALUES
            (%d, %d, %d, %d, '%s', '%s', '%s')",
            $node->nid, $node->vid, $node->cablecast_project_id, $node->cablecast_project_has_podcast, $node->cablecast_project_podcast_name, $node->cablecast_project_podcast_description, $node->cablecast_project_podcast_url);
    }
}
/**
 * Implementation of hook_update().
 */
function cablecast_update($node) {
    if($node->revision) {
        cablecast_insert($node);
    }
    else {
        switch($node->type) {
            case 'cablecast_show':
                if($node->showID) {
                    db_query("UPDATE {cablecast_show} SET showID=%d, internalTitle='%s', trt=%d, event_date=%d, category_id=%d, project_id=%d, producer_id=%d, producer_name='%s', rating='%s', dsk_bug_text='%s', dsk_crawl_text='%s', dsk_crawl_length=%d WHERE vid=%d",
                    $node->showID, $node->internalTitle, $node->trt, $node->event_date, $node->category_id, $node->project_id, $node->producer_id, $node->producer_name, $node->rating, $node->dsk_bug_text, $node->dsk_crawl_text, $node->dsk_crawl_length, $node->vid);
                }
                break;
            case 'cablecast_schedule_event':
                if($node->scheduleID) {
                    db_query("UPDATE {cablecast_schedule_event} SET scheduleID=%d, showID=%d, cablecast_show_nid=%d, start_time=%d, end_time=%d, run_bump=%d, cg_exempt=%d WHERE vid=%d",
                    $node->scheduleID, $node->showID, $node->cablecast_show_nid, $node->start_time, $node->end_time, $node->run_bump, $node->cg_exempt, $node->vid);
                    break;
                }
            case 'cablecast_project':
                if($node->cablecast_project_id) {
                    db_query("UPDATE  {cablecast_project} SET cablecast_project_id=%d, cablecast_project_has_podcast=%d, cablecast_project_podcast_name='%s', cablecast_project_podcast_description='%s', cablecast_project_podcast_url='%s' WHERE vid=%d",
                    $node->cablecast_project_id, $node->cablecast_project_has_podcast, $node->cablecast_project_podcast_name, $node->cablecast_project_podcast_description, $node->cablecast_project_podcast_url, $node->vid);
                    break;
                }
        }
    }
}

/**
 * Implementation of hook_load()
 */
function cablecast_load($node) {
    switch ($node->type) {
        case "cablecast_show":
            $result = db_fetch_object(db_query('SELECT showID, internalTitle, trt, event_date, category_id, project_id, producer_id, producer_name, rating, dsk_bug_text, dsk_crawl_text, dsk_crawl_length FROM {cablecast_show} WHERE vid = %d', $node->vid));
            //Add Project Name to Show Node
            $project_nid = db_result(db_query("SELECT nid FROM {cablecast_project} WHERE cablecast_project_id=%d", $result->project_id));
            if($project_nid)  {
                $project_name = db_result(db_query("SELECT title FROM {node} WHERE nid=%d", $project_nid));
                $result->project_name = $project_name;
            }
            else
            {
                $result->project_name = variable_get('cablecast_default_project_name', 'misc');
            }
            break;
        case "cablecast_schedule_event":
            $result = db_fetch_object(db_query('SELECT scheduleID, showID, cablecast_show_nid, start_time, end_time, run_bump, cg_exempt FROM {cablecast_schedule_event} WHERE vid = %d', $node->vid));
            break;
        case "cablecast_project":
            $result = db_fetch_object(db_query('SELECT cablecast_project_id, cablecast_project_has_podcast, cablecast_project_podcast_name, cablecast_project_podcast_description, cablecast_project_podcast_url FROM {cablecast_project} WHERE vid=%d', $node->vid));
            $cablecast_shows = array();
            //            $show_nids = db_query("SELECT nid FROM {cablecast_show} WHERE project_id =  $result->cablecast_project_id ORDER BY event_date DESC");
            $show_nids = pager_query("SELECT nid FROM {cablecast_show} WHERE project_id = %d ORDER BY event_date DESC",20,0,NULL, array($result->cablecast_project_id));
            while($r = db_fetch_array($show_nids))  {
                $show_node = node_load($r['nid']);
                if(module_exists('cablecast_extensions')) {
                    $cablecast_shows[] = cablecast_extensions_show_node_load($r['nid']);
                }
                else
                {
                    $cablecast_shows[] = $show_node;
                }
            }
            $result->cablecast_shows = $cablecast_shows;
    }
    return $result;
}

/**
 * Implementation of hook_view().
 */
function cablecast_view($node, $teaser = FALSE, $page = FALSE) {
    //TODO - Modify for other cablecast content types
    if(!$teaser) {
        $node = node_prepare($node, $teaser);
        switch($node->type) {
            case 'cablecast_show':
                $node->content['internalTitle'] = array(
					'#value' => theme('cablecast_show_internalTitle', $node),
					'#weight' => 2,
                );
                $node->content['trt'] = array(
					'#value'  =>  theme('cablecast_show_trt', $node),
					'#weight'  => 2,
                );
                break;
            case 'cablecast_schedule_event':
                break;
            case 'cablecast_project':
                $node->content['shows'] = array(
				'#value'  =>  theme('cablecast_project_shows', $node),
				'#weight'  => 2,
                );
                break;
        }

    }
    if($teaser) {
        $node = node_prepare($node, $teaser);
    }
    return $node;
}

/**
 * Implementation of hook_delete()
 */
function cablecast_delete(&$node) {
    switch($node->type) {
        case 'cablecast_show':
            db_query('DELETE FROM {cablecast_show} WHERE nid =%d', $node->nid);
            break;
        case 'cablecast_schedule_event':
            db_query('DELETE FROM {cablecast_schedule_event} WHERE nid =%d', $node->nid);
            break;
        case 'cablecast_project':
            db_query('DELETE FROM {cablecast_project} WHERE nid=%d', $node->nid);
            break;
    }
}

function cablecast_theme() {
    return array(
        'cablecast_show_internalTitle' => array(
            'arguments' => array('node'),
    ),
        'cablecast_show_trt'  =>  array(
            'arguments'  =>  array('node'),
    ),
		'cablecast_project_shows'  => array(
			'arguments'  =>  array('node'),
    ),
    );
}

function theme_cablecast_show_internalTitle($node) {
    $output = '<div class="cablecast-show-internalTitle">'.
    check_markup($node->internalTitle).'</div><br />';
    return $output;
}

function theme_cablecast_show_trt($node)  {
    $output = '<div class="cablecast-show-trt">'.
    check_markup($node->trt).'</div><br />';
    return $output;
}

function theme_cablecast_project_shows($node)  {
    $shows_table_header = array(array('data'=>t("Show"),'class'=>''), array('data'=>t("Date"),'class'=>''), array('data'=>t("Length"),'class'=>''), array('data'=>t("View Online"),'class'=>'vod_links'));
    $shows_table_rows = array();
    foreach($node->cablecast_shows as $show)  {
        $vodlinks = $show->vod_links ? $show->vod_links : '';
        $shows_table_rows[] = array(
        array('data'=> '<a href="/'.$show->path.'">'.check_markup($show->title).'</a>', 'class'=>'show_title'),
        array('data'=> date('m/d/Y',$show->event_date), 'class'=>'event_date'),
        array('data'=> (int)($show->trt/60) . ' min', 'class'=>'event_trt'),
        array('data'=> $vodlinks, 'class'=>'vod_links')
        );
         
    }
    $output = theme_table($shows_table_header, $shows_table_rows, array('id'=>'cablecast_project_shows', 'class' => 'cablecast_project_shows'));
    $output .= theme('pager',array(), 20);
    return $output;
}

function cablecast_views_api() {
    return array(
    'api' => 2,
    );
}

function cablecast_perm() {
    return array('create cablecast_show', 'edit own cablecast_show', 'edit any cablecast_show', 'delete own cablecast_show', 'delete any cablecast_show');
}

function cablecast_access($op, $node, $account) {
    $is_author = $account->uid == $node->uid;
    switch($op) {
        case 'create':
            return user_access('create cablecast_show', $account);
        case 'update':
            return user_access('edit own cablecast_show', $account) && $is_author || user_access('edit any cablecast_show', $account);
        case 'delete':
            return user_access('delete own cablecast_show', $account) && $is_author || user_access('delete any cablecast_show', $account);
    }
}

function cablecast_sync_projects($client) {
    try {
        $cablecast_channel_id = variable_get('cablecast_default_channel', '1');
        $cablecast_projects = $client->GetProjects(array("ChannelID" => (int)$cablecast_channel_id));
        $projects = is_array($cablecast_projects->GetProjectsResult->Project) ? $cablecast_projects->GetProjectsResult->Project : array($cablecast_projects->GetProjectsResult->Project);
        foreach($projects as $project) {
            $result = db_result(db_query("SELECT COUNT(nid) FROM {cablecast_project} WHERE cablecast_project_id=%d", $project->ProjectID));
            if($result == 0) {
                $node = new stdClass();
                $node->type = 'cablecast_project';
                $node->uid = 1;
                $node->vid = 1;
                $node->status = 0;
            }
            // Load node for projects that do exist
            else {
                $project_nid = db_result(db_query("SELECT nid FROM {cablecast_project} WHERE cablecast_project_id=%d", $project->ProjectID));
                $node = node_load($project_nid);
            }
            $node->title = $project->Name;
            $node->body = $project->Description;
            $node->teaser = $project->Description;
            $node->cablecast_project_id = $project->ProjectID;
            $node->cablecast_project_has_podcast = $project->HasPodcast;
            $node->cablecast_project_podcast_name = $project->PodcastName;
            $node->cablecast_project_podcast_description = $project->PodcastDescription;
            $node->cablecast_project_podcast_url = $project->PodcastUrl;
            node_save($node);
        }
        watchdog("Cablecast", count($projects). " projects were added or updated");
    }
    catch(SoapFault $fault)  {
        watchdog("Cablecast", "Communicating to server caused the following error: ".$fault->faultstring);
    }
}

function cablecast_sync_channels($client) {
    try {
        $vid = db_result(
        db_query(
            "SELECT vid FROM {vocabulary} WHERE name = '%s'",
            'Cablecast Channels'
            )
            );

            $params = array("LocationID" => $cablecast_location_id, "SearchDate" => $cablecast_last_sync, "DateComparator" => ">");
            $cablecast_channels = $client->GetChannels(NULL);
            $drupal_channels = taxonomy_get_tree($vid);

            //For each Channel Search the Tree for matching term if it doesn't exist.  Add it
            $channels = is_array($cablecast_channels->GetChannelsResult->Channel) ? $cablecast_channels->GetChannelsResult->Channel : array($cablecast_channels->GetChannelsResult->Channel);
            foreach($channels as $channel) {
                $term_exists = false;
                foreach($drupal_channels as $term) {
                    if($term->name == $channel->Name) {
                        $term_exists = true;
                    }
                }
                if(!$term_exists) {
                    $term = array('name' => $channel->Name,
                    'description' => 'Cablecast Channel',
                    'vid'  => $vid,
                    'weight' => 0,
                    );
                    taxonomy_save_term(&$term);
                }
            }
    }
    catch(SoapFault $fault)  {
        watchdog("Cablecast", "Communicating to server caused the following error: ".$fault->faultstring);
    }
}


function cablecast_sync_categories($client) {
    try {
        $vid = db_result(
        db_query(
            "SELECT vid FROM {vocabulary} WHERE name = '%s'",
            'Cablecast Categories'
            )
            );
            // we need a valid channel ID to get cablecast categories, only one is needed since you get the same result for each channel ID!
            $cablecast_channels = $client->GetChannels();
            $channels = is_array($cablecast_channels->GetChannelsResult->Channel) ? $cablecast_channels->GetChannelsResult->Channel : array($cablecast_channels->GetChannelsResult->Channel);
            $channel_id = $channels[0]->ChannelID;
            $cablecast_categories = $client->GetCategories(array('ChannelID' => $channel_id));
            $drupal_categories = taxonomy_get_tree($vid);
            //For each Category Search the Tree for matching term if it doesn't exist.  Add it
            $categories = is_array($cablecast_categories->GetCategoriesResult->Category) ? $cablecast_categories->GetCategoriesResult->Category : array($cablecast_categories->GetCategoriesResult->Category);
            foreach($categories as $category) {
                $term_exists = false;
                foreach($drupal_categories as $term) {
                    if($term->name == $category->Name && !$term_exists) {
                        $term_exists = true;
                    }
                }
                if(!$term_exists) {
                    $term = array('name' => $category->Name,
                    'description' => 'Cablecast Category',
                    'vid'  => $vid,
                    'weight' => 0,
                    );
                    taxonomy_save_term(&$term);
                }
            }
    }
    catch(SoapFault $fault)  {
        watchdog("Cablecast", "Communicating to server caused the following error: ".$fault->faultstring);
    }
}

function cablecast_sync_schedule($client) {
    try{
        $drupal_schedule_result = db_query("SELECT nid FROM {cablecast_schedule_event} WHERE start_time > %d", _cablecast_site_time());
        $schedule_nids = array();
        while($r = db_fetch_array($drupal_schedule_result))  {
            $schedule_nids[] = (int)$r["nid"];
        }
        $cablecast_channels = $client->GetChannels(NULL);
        $channels = is_array($cablecast_channels->GetChannelsResult->Channel) ? $cablecast_channels->GetChannelsResult->Channel : array($cablecast_channels->GetChannelsResult->Channel);
        foreach($channels as $channel) {
            $params = array('ChannelID' => $channel->ChannelID,
                'FromDate' =>  date('Y-m-d\T00:00:00', _cablecast_site_time()),
                'ToDate'  =>  date('Y-m-d\T23:59:59', _cablecast_site_time()+60*60*24*30),
                'restrictToShowID'  =>  0,
            );
            $schedule_events = $client->GetCGExemptScheduleInformation($params);
            if($schedule_events->GetCGExemptScheduleInformationResult->ScheduleInfo) {
                if($schedule_events->GetCGExemptScheduleInformationResult->ScheduleInfo->ScheduleID) {
                    $schedule_events->GetCGExemptScheduleInformationResult->ScheduleInfo = array($schedule_events->GetCGExemptScheduleInformationResult->ScheduleInfo);
                }
                foreach($schedule_events->GetCGExemptScheduleInformationResult->ScheduleInfo as $event) {
                    if ($show_nid = db_result(db_query("SELECT nid FROM {cablecast_show} WHERE showID=%d", $event->ShowID)))  {
                        $result = db_result(db_query("SELECT COUNT(nid) FROM {cablecast_schedule_event} WHERE scheduleID=%d", $event->ScheduleID));
                        if($result == 0) {
                            $node = new stdClass();
                            $node->type = 'cablecast_schedule_event';
                            $node->uid = 1;
                            $node->vid = 1;
                        }
                        // Load node for shows that do exist
                        else {
                            $event_nid = db_result(db_query("SELECT nid FROM {cablecast_schedule_event} WHERE scheduleID=%d", $event->ScheduleID));
                            $node = node_load($event_nid);
                            //Remove from to be deleted list.
                            if($key = array_search($event_nid, $schedule_nids))  {
                                unset($schedule_nids[$key]);
                            }
                        }
                        $node->showID = $event->ShowID;
                        $node->title = $event->ShowTitle;
                        $node->scheduleID = $event->ScheduleID;
                        $node->start_time = strtotime($event->StartTime);
                        $node->end_time = strtotime($event->EndTime);
                        $node->run_bump = $event->RunBump;
                        $node->cg_exempt = $event->CGExempt;
                        $node->status = $event->CGExempt ? 0 : 1;
                        $node->taxonomy = _cablecast_get_taxonomy_term_by_name($channel->Name, 'Cablecast Channels');
                        $node->cablecast_show_nid = $show_nid;
//                        watchdog("Cablecast", "saved schedule event ".$event->ShowTitle." Start time: ".$event->StartTime." node->start_time: ".$node->start_time);
                        node_save($node);
                    }
                }
            }
        }
        //Delete all schedule_event nodes that aren't current.
        foreach($schedule_nids as $delete_node)  {
            node_delete($delete_node);
        }
    }
    catch(SoapFault $fault)  {
        watchdog("Cablecast", "Communicating to server caused the following error: ".$fault->faultstring);
    }
}

function cablecast_sync_shows($client)  {
    try {
        $cablecast_location_id = variable_get('cablecast_default_location', '22');
        $cablecast_last_sync = variable_get('cablecast_last_sync', '1900-01-01T12:00:00');
        $params = array("LocationID" => $cablecast_location_id, "SearchDate" => $cablecast_last_sync, "DateComparator" => ">");
        $cablecast_updated_shows = $client->LastModifiedSearch($params);
        if($cablecast_updated_shows->LastModifiedSearchResult->ShowInfo) {
            if($cablecast_updated_shows->LastModifiedSearchResult->ShowInfo->ShowID) {
                $cablecast_updated_shows->LastModifiedSearchResult->ShowInfo = array($cablecast_updated_shows->LastModifiedSearchResult->ShowInfo);
            }
            foreach($cablecast_updated_shows->LastModifiedSearchResult->ShowInfo as $show) {
                //Create a new node for shows that don't exist
                $result = db_result(db_query("SELECT COUNT(nid) FROM {cablecast_show} WHERE showID=%d", $show->ShowID));
                if($result == 0) {
                    $node = new stdClass();
                    $node->type = 'cablecast_show';
                    $node->uid = 1;
                    $node->vid = 1;
                    watchdog("Cablecast","cablecast_sync - new node: ".$show->Title);
                }
                // Load node for shows that do exist
                else {
                    $show_nid = db_result(db_query("SELECT nid FROM {cablecast_show} WHERE showID=%d", $show->ShowID));
                    $node = node_load($show_nid);
                    watchdog("Cablecast",'cablecast_sync - update node: '.$show->Title);
                }
                $node->status = $show->CGExempt ? 0 : 1;  //Publish node only if show is not CG Exmept
                $node->title = $show->Title;
                $node->showID = $show->ShowID;
                $node->internalTitle = $show->InternalTitle;
                $node->body = $show->Comments;
                $node->trt = $show->TotalSeconds;
                $node->event_date = strtotime($show->EventDate);
                $node->created = $node->event_date;
                $node->category_id = $show->CategoryID;
                $node->project_id = $show->ProjectID;
                $node->producer_id = $show->ProducerID;
                $node->producer_name = $show->Producer;
                $node->rating = "n/a";  //Cablecast doesn't export this yet
                $node->dsk_bug_text = $show->BugText;
                $node->dsk_crawl_text = $show->CrawlText;
                $node->dsk_crawl_length = $show->CrawlLengthInSeconds;
                $node->taxonomy = _cablecast_get_taxonomy_term_by_name($show->Category, 'Cablecast Categories');
                $node->comment = 2;
                node_save($node);
                cablecast_sync_custom_fields($node, $show->CustomFields);  //sync customr fields afer node_save so nid is available.
                $cablecast_last_sync = $show->LastModified;
            }
        }
        variable_set('cablecast_last_sync', $cablecast_last_sync);
    }
    catch(SoapFault $fault)  {
        watchdog("Cablecast", "Communicating to server caused the following error: ".$fault->faultstring);
    }
}

function cablecast_sync_custom_fields($node, $custom_fields)  {

    db_query('DELETE FROM {cablecast_custom_field} WHERE nid = %d',$node->nid);
    $custom_fields = is_array($custom_fields) ? $custom_fields : array($custom_fields);
    foreach($custom_fields as $custom_field) {
        if($custom_field->CustomField->Name && $custom_field->CustomField->Value) {
            db_query('INSERT INTO {cablecast_custom_field} SET nid=%d, field_name="%s", value="%s"', $node->nid, $custom_field->CustomField->Name, $custom_field->CustomField->Value);
        }
    }
}

function cablecast_check_version($client)  {
    $version = 0;
    try {
        $response = $client->WSVersion();
        $version = (int)str_replace('.', '', $response->WSVersionResult);
    }
    catch(SoapFault $fault)  {
        watchdog("Cablecast", "Communicating to server caused the following error: ".$fault->faultstring);
    }
    return $version >= 300;
}


// adapted from http://drupal.org/files/issues/drupal-7-dev-336697-8.patch
function _cablecast_get_taxonomy_term_by_name($name, $vocab_name = NULL) {
    if($vocab_name) {
        $vid = db_result(
        db_query(
            "SELECT vid FROM {vocabulary} WHERE name = '%s'",
        trim($vocab_name)
        )
        );
    }
    $sql = NULL;
    $args[] = trim($name);
    // multiple vocabularies to select from?
    if (is_array($vid)) {
        $placeholders = array_fill(0, count($vid), '?');
        $sql = ' AND t.vid IN (' . implode(', ', $placeholders) . ') ';
        $args = array_merge($args, $vid);
    }
    // single vocabulary to select from?
    if (is_numeric($vid)) {
        $sql = ' AND t.vid = %d';
        $args[] = $vid;
    }
    $db_result = db_query("SELECT t.tid, t.* FROM {term_data} t WHERE LOWER(t.name) = LOWER('%s')" . $sql, $args);
    $result = array();
    while ($term = db_fetch_object($db_result)) {
        $result[] = $term;
    }
    //   $debug = array($vocab_name, $vid, $args, $result);
    //   dpm($debug);
    return $result;
}

function _cablecast_site_time() {
    $offset = variable_get('date_default_timezone', date('Z')) - date('Z');
    return time()+$offset;
}
